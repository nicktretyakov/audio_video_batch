# ONNX Runtime enabled build
FROM ubuntu:22.04 as onnx-base

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV RUST_VERSION=1.75.0

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    build-essential \
    pkg-config \
    libssl-dev \
    libavformat-dev \
    libavcodec-dev \
    libavutil-dev \
    libswscale-dev \
    libavfilter-dev \
    libavdevice-dev \
    ffmpeg \
    && rm -rf /var/lib/apt/lists/*

# Install ONNX Runtime
ENV ORT_VERSION=1.16.3
RUN wget https://github.com/microsoft/onnxruntime/releases/download/v${ORT_VERSION}/onnxruntime-linux-x64-${ORT_VERSION}.tgz && \
    tar -xzf onnxruntime-linux-x64-${ORT_VERSION}.tgz && \
    mv onnxruntime-linux-x64-${ORT_VERSION} /opt/onnxruntime && \
    rm onnxruntime-linux-x64-${ORT_VERSION}.tgz

ENV ORT_LIB_LOCATION=/opt/onnxruntime/lib
ENV LD_LIBRARY_PATH=${ORT_LIB_LOCATION}:$LD_LIBRARY_PATH

# Install Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${RUST_VERSION}
ENV PATH="/root/.cargo/bin:${PATH}"

WORKDIR /app

# Copy Cargo files
COPY Cargo.toml Cargo.lock ./

# Create dummy main.rs for dependency caching
RUN mkdir src && echo "fn main() {}" > src/main.rs

# Build dependencies with ONNX support
RUN cargo build --release --features onnx
RUN rm -rf src

# Copy source code
COPY src ./src

# Build the application with ONNX
RUN cargo build --release --features onnx

# Runtime stage
FROM ubuntu:22.04 as onnx-runtime

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ffmpeg \
    libssl3 \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Copy ONNX Runtime
COPY --from=onnx-base /opt/onnxruntime /opt/onnxruntime
ENV ORT_LIB_LOCATION=/opt/onnxruntime/lib
ENV LD_LIBRARY_PATH=${ORT_LIB_LOCATION}:$LD_LIBRARY_PATH

# Create app user
RUN useradd -m -u 1000 appuser

WORKDIR /app

# Copy binary from build stage
COPY --from=onnx-base /app/target/release/video-audio-processor /usr/local/bin/

# Create directories
RUN mkdir -p input_videos output_results frames models && \
    chown -R appuser:appuser /app

USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD video-audio-processor --help || exit 1

ENTRYPOINT ["video-audio-processor"]
CMD ["--help"]
